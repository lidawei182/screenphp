"use strict";(self["webpackChunkdatafication"]=self["webpackChunkdatafication"]||[]).push([[671],{17671:function(t,n,e){e.r(n),e.d(n,{default:function(){return x}});var i=function(){var t=this,n=t._self._c;return n("div",{attrs:{id:"container"}})},a=[],o=e(89096);let s,r,c,v;var f={name:"StreamLine",props:{},data(){return{}},mounted(){this.init(),this.animate()},methods:{init:function(){const t=document.getElementById("container");s=new o.xsS,r=new o.cPb(75,1,.1,1e4),r.position.z=2,c=new o.CP7({antialias:!0,alpha:!0}),t.appendChild(c.domElement),v=new o.Kj0(new o._12(1,1,128,128),new o.jyz({uniforms:{time:{value:1}},vertexShader:"\n\t\t\t\tvarying vec3 vEC;\n\t\t\t\tuniform float time;\n\n\t\t\t\tfloat iqhash(float n) {\n\t\t\t\t  return fract(sin(n) * 43758.5453);\n\t\t\t\t}\n\n\t\t\t\tfloat noise(vec3 x) {\n\t\t\t\t  vec3 p = floor(x);\n\t\t\t\t  vec3 f = fract(x);\n\t\t\t\t  f = f * f * (3.0 - 2.0 * f);\n\t\t\t\t  float n = p.x + p.y * 57.0 + 113.0 * p.z;\n\t\t\t\t  return mix(mix(mix(iqhash(n), iqhash(n + 1.0), f.x),\n\t\t\t\t\t\t\t mix(iqhash(n + 57.0), iqhash(n + 58.0), f.x), f.y),\n\t\t\t\t\t\t\t mix(mix(iqhash(n + 113.0), iqhash(n + 114.0), f.x),\n\t\t\t\t\t\t\t mix(iqhash(n + 170.0), iqhash(n + 171.0), f.x), f.y), f.z);\n\t\t\t\t}\n\n\t\t\t\tfloat xmb_noise2(vec3 x) {\n\t\t\t\t  return cos(x.z * 4.0) * cos(x.z + time / 10.0 + x.x);\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t  vec4 pos = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\t\t\t\t  vec3 v = vec3(pos.x, 0.0, pos.y);\n\t\t\t\t  vec3 v2 = v;\n\t\t\t\t  vec3 v3 = v;\n\n\t\t\t\t  v.y = xmb_noise2(v2) / 8.0;\n\n\t\t\t\t  v3.x -= time / 5.0;\n\t\t\t\t  v3.x /= 4.0;\n\n\t\t\t\t  v3.z -= time / 10.0;\n\t\t\t\t  v3.y -= time / 100.0;\n\n\t\t\t\t  v.z -= noise(v3 * 7.0) / 15.0;\n\t\t\t\t  v.y -= noise(v3 * 7.0) / 15.0 + cos(v.x * 2.0 - time / 2.0) / 5.0 - 0.3;\n\n\t\t\t\t  vEC = v;\n\t\t\t\t  gl_Position = vec4(v, 1.0);\n\t\t\t\t}\n\t\t\t  ",fragmentShader:"\n\t\t\t\tuniform float time;\n\t\t\t\tvarying vec3 vEC;\n\n\t\t\t\tvoid main()\n\t\t\t\t{\n\t\t\t\t   const vec3 up = vec3(0.0, 0.0, 1.0);\n\t\t\t\t   vec3 x = dFdx(vEC);\n\t\t\t\t   vec3 y = dFdy(vEC);\n\t\t\t\t   vec3 normal = normalize(cross(x, y));\n\t\t\t\t   float c = 1.0 - dot(normal, up);\n\t\t\t\t   c = (1.0 - cos(c * c)) / 3.0;\n\t\t\t\t   gl_FragColor = vec4(1.0, 1.0, 1.0, c * 1.5);\n\t\t\t\t}\n\t\t\t  ",extensions:{derivatives:!0,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},side:o.ehD,transparent:!0,depthTest:!1})),s.add(v),this.resize(),window.addEventListener("resize",this.resize)},resize:function(){const t=document.getElementById("container"),{offsetWidth:n,offsetHeight:e}=t;c.setSize(n,e),c.setPixelRatio(devicePixelRatio),r.aspect=n/e,r.updateProjectionMatrix(),v.scale.set(1.55*r.aspect,.75,1)},animate:function(){v.material.uniforms.time.value+=.01,c.render(s,r),requestAnimationFrame((()=>this.animate()))}}},m=f,d=e(1001),l=(0,d.Z)(m,i,a,!1,null,null,null),x=l.exports}}]);